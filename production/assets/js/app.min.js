/**
 * Sistema de Gestión Financiera Personal - Production Bundle
 * Version: 1.0.0
 * Build Date: 2025-06-19
 * 
 * Este archivo contiene todos los módulos JavaScript del sistema
 * optimizados y minificados para producción.
 * 
 * Módulos incluidos:
 * - LocalStorageManager
 * - IndexedDBManager
 * - Modelos (Ingreso, Gasto)
 * - Algoritmos de priorización
 * - Gestores de interfaz
 * - Ventanas del sistema
 * - Utilidades (exportar, notificaciones, configuración)
 * - Sistema principal
 */

// Production Configuration
const PRODUCTION_CONFIG = {
    version: '1.0.0',
    buildDate: '2025-06-19',
    environment: 'production',
    debug: false,
    apiEndpoint: '',
    cdnUrl: 'https://cdn.jsdelivr.net',
    maxRetries: 3,
    autoSaveInterval: 300000, // 5 minutes
    cacheTimeout: 3600000, // 1 hour
    maxStorageSize: 50 * 1024 * 1024 // 50MB
};

// Error Tracking for Production
class ProductionErrorTracker {
    constructor() {
        this.errors = [];
        this.maxErrors = 100;
        this.init();
    }

    init() {
        window.addEventListener('error', (e) => this.trackError(e));
        window.addEventListener('unhandledrejection', (e) => this.trackPromiseRejection(e));
    }

    trackError(errorEvent) {
        const error = {
            timestamp: new Date().toISOString(),
            message: errorEvent.message,
            filename: errorEvent.filename,
            lineno: errorEvent.lineno,
            colno: errorEvent.colno,
            stack: errorEvent.error ? errorEvent.error.stack : null,
            userAgent: navigator.userAgent,
            url: window.location.href
        };

        this.addError(error);
    }

    trackPromiseRejection(rejectionEvent) {
        const error = {
            timestamp: new Date().toISOString(),
            type: 'unhandledPromiseRejection',
            reason: rejectionEvent.reason,
            userAgent: navigator.userAgent,
            url: window.location.href
        };

        this.addError(error);
    }

    addError(error) {
        this.errors.unshift(error);
        if (this.errors.length > this.maxErrors) {
            this.errors = this.errors.slice(0, this.maxErrors);
        }

        // In production, you might want to send this to a logging service
        if (PRODUCTION_CONFIG.debug) {
            console.error('Production Error Tracked:', error);
        }
    }

    getErrors() {
        return this.errors;
    }

    clearErrors() {
        this.errors = [];
    }
}

// Initialize error tracking
window.ProductionErrorTracker = new ProductionErrorTracker();

// Performance Monitor for Production
class PerformanceMonitor {
    constructor() {
        this.metrics = {
            pageLoadTime: 0,
            domContentLoaded: 0,
            firstContentfulPaint: 0,
            largestContentfulPaint: 0,
            cumulativeLayoutShift: 0,
            interactionToNextPaint: 0
        };
        this.init();
    }

    init() {
        // Page Load Time
        window.addEventListener('load', () => {
            this.metrics.pageLoadTime = performance.now();
        });

        // DOM Content Loaded
        document.addEventListener('DOMContentLoaded', () => {
            this.metrics.domContentLoaded = performance.now();
        });

        // Web Vitals (simplified)
        if ('PerformanceObserver' in window) {
            try {
                // LCP
                const lcpObserver = new PerformanceObserver((entryList) => {
                    const entries = entryList.getEntries();
                    const lastEntry = entries[entries.length - 1];
                    this.metrics.largestContentfulPaint = lastEntry.startTime;
                });
                lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

                // FCP
                const fcpObserver = new PerformanceObserver((entryList) => {
                    const entries = entryList.getEntries();
                    for (const entry of entries) {
                        if (entry.name === 'first-contentful-paint') {
                            this.metrics.firstContentfulPaint = entry.startTime;
                        }
                    }
                });
                fcpObserver.observe({ entryTypes: ['paint'] });
            } catch (e) {
                // Performance Observer not supported
            }
        }
    }

    getMetrics() {
        return this.metrics;
    }

    mark(name) {
        if ('performance' in window && 'mark' in performance) {
            performance.mark(name);
        }
    }

    measure(name, startMark, endMark) {
        if ('performance' in window && 'measure' in performance) {
            try {
                performance.measure(name, startMark, endMark);
                const measures = performance.getEntriesByName(name, 'measure');
                return measures[measures.length - 1].duration;
            } catch (e) {
                return 0;
            }
        }
        return 0;
    }
}

// Initialize performance monitoring
window.PerformanceMonitor = new PerformanceMonitor();

// Production Logger (minimal)
class ProductionLogger {
    constructor() {
        this.enabled = PRODUCTION_CONFIG.debug;
    }

    log(message, data = null) {
        if (this.enabled) {
            console.log(`[PROD] ${message}`, data);
        }
    }

    warn(message, data = null) {
        if (this.enabled) {
            console.warn(`[PROD] ${message}`, data);
        }
    }

    error(message, data = null) {
        // Always log errors in production
        console.error(`[PROD] ${message}`, data);
    }

    info(message, data = null) {
        if (this.enabled) {
            console.info(`[PROD] ${message}`, data);
        }
    }
}

window.ProductionLogger = new ProductionLogger();

// Note: In a real production environment, you would include all the minified
// JavaScript modules here. For this example, we're providing the structure
// and production utilities. The actual application code would be concatenated
// and minified using build tools like Webpack, Rollup, or Gulp.

// Production initialization
document.addEventListener('DOMContentLoaded', function() {
    window.ProductionLogger.info('Sistema de Gestión Financiera Personal iniciado');
    window.PerformanceMonitor.mark('app-init-start');
    
    // Initialize application
    if (typeof SistemaGestorFinanciero !== 'undefined') {
        const sistema = new SistemaGestorFinanciero();
        sistema.init().then(() => {
            window.PerformanceMonitor.mark('app-init-end');
            const initTime = window.PerformanceMonitor.measure('app-initialization', 'app-init-start', 'app-init-end');
            window.ProductionLogger.info(`Aplicación inicializada en ${initTime.toFixed(2)}ms`);
        }).catch((error) => {
            window.ProductionLogger.error('Error al inicializar la aplicación:', error);
        });
    }
});

// Service Worker Registration for PWA
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                window.ProductionLogger.info('ServiceWorker registrado exitosamente');
            })
            .catch(function(err) {
                window.ProductionLogger.error('Error al registrar ServiceWorker:', err);
            });
    });
}

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        PRODUCTION_CONFIG,
        ProductionErrorTracker,
        PerformanceMonitor,
        ProductionLogger
    };
}

/**
 * NOTA IMPORTANTE:
 * Este archivo es un esqueleto para la versión de producción.
 * En un entorno real, aquí se incluirían todos los módulos JavaScript
 * del sistema concatenados y minificados.
 * 
 * Para crear el bundle completo, ejecute:
 * npm run build
 * 
 * O use la herramienta de build incluida en development/scripts/
 */
